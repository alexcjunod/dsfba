# Data

```{r, echo = FALSE, message = FALSE}
source(here::here("scripts/setup.R"))
```

## Sources

We have extracted our Road Safety Data from the UK Government's data sets for 2022, focusing on road incidents. To answer our four research questions, we used four data sets, each providing essential details about accidents in the UK during 2022. All data sets contain the unique "Accident_Index," which facilitates easy merging or searching for more detailed data in subsequent steps (e.g., cleaning and wrangling) as needed.

| Num \# | Name                                                                                                                                                                                               |
|---------------|---------------------------------------------------------|
| 1      | [Collision Statistics](https://www.data.gov.uk/dataset/cb7ae6f0-4be6-4935-9277-47e5ce24a11f/road-safety-data/datafile/7720d2c6-1282-47b5-b77b-90749457788b/preview "Link to Collision Statistics") |
| 2      | [Vehicle Statistics](https://www.data.gov.uk/dataset/cb7ae6f0-4be6-4935-9277-%2047e5ce24a11f/road-safety-data/datafile/8d02ed6a-7023-48e6-bdbe-c44c5f9e6214/preview "Link to Vehicle Statistics")  |
| 3      | [Casualty Statistics](https://www.data.gov.uk/dataset/cb7ae6f0-4be6-4935-9277-47e5ce24a11f/road-safety-data/datafile/478bc069-38ce-406a-b297-f4d73e43a03e/preview "Link to Casualty Statistics")   |
| 4      | [Legend](https://www.data.gov.uk/dataset/cb7ae6f0-4be6-4935-9277-47e5ce24a11f/road-safety-data/datafile/478bc069-38ce-406a-b297-f4d73e43a03e/preview "Link to Legend")                             |

## Description

### DS 1: Collision Statistics

##### Description:

This data set encompasses detailed information on road collisions and accidents in the UK for the year 2022. It includes a comprehensive range of features such as the location of the accident, the time it occurred, the severity of the collision, and the type of road involved. This data set is crucial as it provides a holistic view of all road collisions that occurred in the specified period.

```{r echo=TRUE}
# Path to the dataset
accident_data_path <- here::here("data", "dft-road-casualty-statistics-collision-2022.csv")

# Reading the dataset
accident_df <- read.csv(accident_data_path)

# Creating a descriptive data frame for the collision dataset
accident_columns <- data.frame(
  "N°" = 1:length(names(accident_df)),
  "Name" = names(accident_df),
  "Type" = sapply(accident_df, function(column) class(column)[1]),  # Automatically gets the class of each column
  "Example" = sapply(accident_df, function(column) column[1]),  # Get the first entry of each column
  "Explanation" = c(
    "Description for the first column",
    "Description for the second column"
    # Continue with descriptions for all columns in your dataset.
    # Ensure the number of descriptions matches the number of columns.
  )
)

datatable(accident_columns, rownames = FALSE, caption = "Collision Dataset Variables", class = 'cell-border stripe')
```

##### Key Features:

-   Consists of one large table

-   Includes 36 different variables

-   Contains a total of +106,000 observations.

##### Relevance:

-   Used for research questions 1-4

### DS 2: Vehicle Statistics

##### Description:

This data set offers detailed information concerning the vehicles involved in collisions and their drivers within the UK in 2022. It encompasses a variety of data points, including but not limited to, the type of vehicle involved and the demographics of the drivers. This dataset is instrumental in understanding the specifics of vehicle-related factors in road collisions.

```{r}
# Path to the dataset
vehicle_data_path <- here::here("data", "dft-road-casualty-statistics-vehicle-2022.csv")

# Reading the dataset
vehicle_df <- read.csv(vehicle_data_path)

# Creating a descriptive data frame for the collision dataset
vehicle_columns <- data.frame(
  "N°" = 1:length(names(vehicle_df)),
  "Name" = names(vehicle_df),
  "Type" = sapply(vehicle_df, function(column) class(column)[1]),  # Automatically gets the class of each column
  "Example" = sapply(vehicle_df, function(column) column[1]),  # Get the first entry of each column
  "Explanation" = c(
    "Description for the first column",
    "Description for the second column"
    # Continue with descriptions for all columns in your dataset.
    # Ensure the number of descriptions matches the number of columns.
  )
)

datatable(vehicle_columns, rownames = FALSE, caption = "Vehicle Dataset Variables", class = 'cell-border stripe')
```

##### Key Features:

-   Consists of one large table

-   Includes 28 distinct variables

-   Contains a total of +195,000 observations.

##### Relevance:

-   Used for research questions 3 & 4

### DS 3: Casualty Statistics

##### Description:

This dataset delivers in-depth insights into casualties resulting from road accidents in the UK during 2022. It covers a broad spectrum of data, including but not limited to, the age and gender of casualties, the severity of their injuries, and the type of casualty (such as pedestrian or passenger). This dataset is essential for a detailed analysis of the human impact of road accidents.

```{r}
# Path to the dataset
casualty_data_path <- here::here("data", "dft-road-casualty-statistics-casualty-2022.csv")

# Reading the dataset
casualty_df <- read.csv(casualty_data_path)

# Create an explanations vector with a description for each column
explanations <- rep("Description for the column", length(names(casualty_df)))

# Creating a descriptive data frame for the casualty dataset
casualty_columns <- data.frame(
  "N°" = 1:length(names(casualty_df)),
  "Name" = names(casualty_df),
  "Type" = sapply(casualty_df, function(column) class(column)[1]),  # Automatically gets the class of each column
  "Example" = sapply(casualty_df, function(column) ifelse(length(column) > 0, as.character(column[1]), NA)),  # Safely get the first entry of each column
  "Explanation" = explanations  # The explanation for each column
)

datatable(casualty_columns, rownames = FALSE, caption = "Casualty Dataset Variables", class = 'cell-border stripe', options = list(pageLength = 10))
```

##### Key Features:

-   Consists of one large table

-   Includes 19 distinct variables

-   Contains a total of +135,000 observations.

##### Relevance:

-   Used for research questions 3 & 4

### DS 4: Legend

##### Description:

This dataset provides the legends to the fields present in our three accident data sets. It is a key resource for understanding and interpreting the data, especially in identifying and decoding missing values. It includes detailed information on what specific values signify a "missing value" or "other" in each column, thereby facilitating accurate data analysis.

```{r}
# Path to the dataset
legend_data_path <- here::here("data", "dft-road-casualty-statistics-collisions-casultys-veihcule-2022.csv")

# Reading the dataset
legend_df <- read.csv(legend_data_path)

# Create an explanations vector with a description for each column
explanations <- rep("Description for the column", length(names(legend_df)))

# Creating a descriptive data frame for the casualty dataset
legend_columns <- data.frame(
  "N°" = 1:length(names(legend_df)),
  "Name" = names(legend_df),
  "Type" = sapply(legend_df, function(column) class(column)[1]),  # Automatically gets the class of each column
  "Example" = sapply(legend_df, function(column) ifelse(length(column) > 0, as.character(column[1]), NA)),  # Safely get the first entry of each column
  "Explanation" = explanations  # The explanation for each column
)

datatable(legend_columns, rownames = FALSE, caption = "Casualty Dataset Variables", class = 'cell-border stripe', options = list(pageLength = 5))
```

##### Key Features:

-   Consists of one large table

-   Includes 5 distinct variables

-   Contains a total of +1,730 observations.

##### Relevance:

-   Allows understanding of data sets 1-3.

-   Description

-   Wrangling/cleaning

-   Spotting mistakes and missing data (could be part of EDA too)

-   Listing anomalies and outlines (could be part of EDA too)

## Cleaning

### I. Preliminary Data Preparation

#### A. Merging data set 1 & data set 3 

One of the initial challenges in our data science project was that our first data set, "Collision Statistics," only provided binary information indicating whether an accident was fatal or not, but lacked detailed counts of fatal injuries, serious injuries, and light injuries.  To address this, we employed data wrangling methods to integrate these variables that were available in our third data set, "Casualty Statistics", into the "Collision Statistics" data set. This enhancement involved merging three key columns: the number of fatal injuries, the number of serious injuries, and the number of light injuries. We used the "Accident Index" as a reference to ensure accurate alignment with the corresponding accidents. 

```{r addition of severity granularity}
library(DiagrammeR)
aggregated_casualties <- casualty_df %>%
  group_by(accident_index, casualty_severity) %>%
  summarise(count = n()) %>%
  spread(key = casualty_severity, value = count, fill = 0) %>%
  rename(
    num_fatal = '1',
    num_serious = '2',
    num_slight = '3'
  )

accident_df <- left_join(accident_df, aggregated_casualties, by="accident_index")


```

Once this integration was complete, we could begin our analysis to identify any missing values that needed to be addressed before we could answer our four research questions. 

#### B. Checking Missing values 

Our initial examination of the datasets revealed a lack of uniformity in the indicators used for missing values. Rather than a single standard marker, various characters, unique to each row, signified absence of data. This inconsistency introduced an additional challenge, necessitating the identification and correct interpretation of these distinct characters for each variable to accurately assess missing values. For example, we observed that three variables in our data set employed different characters to denote missing information. 

*Example of missing values:*

|                     |                          |
|---------------------|--------------------------|
| Variable Name       | Missing Value Character  |
| junction_detail     | -1 or 99                 |
| junction_control    | -1 or 9                  |
| second_road_number  | -1 or 0                  |

We therefore established a "missing values dictionary" that holds the name of missing values for all variables in our three data sets, namely Collision Statistics, Casualty Statistics, and Vehicle Statistics. This enabled straightforward identification of missing data in the next steps of our project.

```{r dictionary creation}

missing_codes_accident <- list(
  police_force = NULL,
  accident_severity = NULL,
  number_of_vehicles = -1,
  number_of_casualties = -1,
  date = NULL,
  day_of_week = NULL,
  time = NULL,
  local_authority_district = -1,
  local_authority_ons_district = -1,
  local_authority_highway = -1,
  first_road_class = -1,
  first_road_number = c(-1, 0),
  road_type = c(-1, 9),
  speed_limit = c(-1, 99),
  junction_detail = c(-1, 99),
  junction_control = c(-1, 9),
  second_road_class = c(-1, 9),
  second_road_number = c(-1, 0),
  pedestrian_crossing_human_control = c(-1, 9),
  pedestrian_crossing_physical_facilities = c(-1, 9),
  light_conditions = -1,
  weather_conditions = c(-1, 9),
  road_surface_conditions = c(-1, 9),
  special_conditions_at_site = c(-1, 9),
  carriageway_hazards = c(-1, 9),
  urban_or_rural_area = c(-1, 3),
  did_police_officer_attend_scene_of_accident = c(-1, 3),
  trunk_road_flag = -1,
  lsoa_of_accident_location = c(NaN, NA, "NULL", -1),
  accident_index = c(NaN, NA, "NULL"),
  accident_index = c(NaN, NA, "NULL"),
  accident_reference = c(NaN, NA, "NULL"),
  location_easting_osgr = c(NaN, NA, "NULL"),
  location_northing_osgr = c(NaN, NA, "NULL"),
  longitude = c(NaN, NA, "NULL"),
  latitude = c(NaN, NA, "NULL"),
  accident_year = c(NaN, NA, "NULL")
)

missing_codes_vehicle <- list(
  vehicle_reference = NULL,
  vehicle_type = c(-1, 99),
  towing_and_articulation = c(-1, 9),
  vehicle_manoeuvre = c(-1, 99),
  vehicle_direction_from = c(-1, 9),
  vehicle_direction_to = c(-1, 9),
  vehicle_location_restricted_lane = c(-1, 99),
  junction_location = c(-1, 9),
  skidding_and_overturning = c(-1, 9),
  hit_object_in_carriageway = c(-1, 99),
  vehicle_leaving_carriageway = c(-1, 9),
  hit_object_off_carriageway = c(-1, 99),
  first_point_of_impact = c(-1, 9),
  vehicle_left_hand_drive = c(-1, 9),
  journey_purpose_of_driver = c(15, 5, -1),
  sex_of_driver = c(-1, 3),
  age_of_driver = c(-1, "-1"),
  age_band_of_driver = -1,
  engine_capacity_cc = -1,
  propulsion_code = -1,
  age_of_vehicle = NULL,
  generic_make_model = -1,
  driver_imd_decile = -1,
  driver_home_area_type = -1,
  lsoa_of_driver = NULL
)

missing_codes_casualty <- list(
  casualty_reference = NULL,
  casualty_class = NULL,
  sex_of_casualty = c(-1, 9),
  age_of_casualty = -1,
  age_band_of_casualty = -1,
  casualty_severity = -1,
  pedestrian_location = c(-1, 10),
  pedestrian_movement = c(-1, 9),
  car_passenger = c(-1, 9),
  bus_or_coach_passenger = c(-1, 9),
  pedestrian_road_maintenance_worker = -1,
  casualty_type = c(-90, 99, -1),
  casualty_imd_decile = -1,
  casualty_home_area_type = -1,
  lsoa_of_casualty = NULL
)
```

#### C. Creating specific data sets for each research question

This discovery led us to realize that the extent of missing values across various variables was greater than initially anticipated. Considering that not every data set and variable was essential for each research question, we decided to construct smaller, question-specific data sets. This approach enabled us to strategically remove rows with missing values from these focused data sets (rather than the original data sets), based on their relevance to the specific research question. By doing so, we selectively eliminated missing data only from variables critical to a particular question, thereby minimizing overall data loss. 

##### Research Question 1 Dataset:

For the first dataset, we've selected all relevant variables for spatial analysis, including location-specific factors like road type and weather conditions etc.

```{r creating df1}

df1var <- c("accident_index", "accident_reference", "longitude", "latitude", "location_easting_osgr",
                    "location_northing_osgr", 
                   "lsoa_of_accident_location","urban_or_rural_area",
                   "road_type", "first_road_class", "second_road_class", "accident_severity",
                  "num_fatal", "num_serious", "num_slight", "weather_conditions", "road_surface_conditions",
                   "special_conditions_at_site", "number_of_vehicles", "number_of_casualties", "speed_limit", "date", "time", "special_conditions_at_site", "light_conditions") 

q1_clean <- accident_df[,df1var] 

datatable(head(q1_clean))
```

##### Research Question 2 Dataset:

In the second dataset, we've selected all relevant variables for temporal analysis such date, time, day of the week, accident severity to explore temporal patterns and trends.

```{r creating df2}

df2var <- c("accident_index", "accident_reference", "date", "time", "day_of_week", "accident_severity", 
                   "number_of_vehicles", "number_of_casualties", "light_conditions", 
                    "num_fatal", "num_serious", "num_slight",
                   "weather_conditions", "road_surface_conditions", "special_conditions_at_site")

q2_clean <- accident_df[, df2var]

datatable(head(q2_clean))
```

##### Research Question 3 Dataset:

###### Part A

In the third data set 'part A', we've selected all relevant variables to assist in our demographic analysis, including age of casualty, sex of casualty, home area of casualty etc.  

```{r}

df3avar <- c("accident_index", "accident_reference", "vehicle_reference", 
             "casualty_reference", "casualty_class", "sex_of_casualty", "age_of_casualty", 
             "casualty_severity", "pedestrian_location", "pedestrian_movement", 
             "car_passenger", "bus_or_coach_passenger", "pedestrian_road_maintenance_worker", 
             "casualty_type", "casualty_home_area_type")

q3a_clean <- casualty_df[,df3avar]

datatable(head(q3a_clean))
```

###### Part B

In the third data set 'part B,' we have selected all relevant variables for vehicle analysis, including whether the vehicle is left-hand drive, the generic brand, age of the vehicle etc. 

```{r creating df3b}

df3bvar <- c("accident_index", "accident_reference", "vehicle_type",
             "skidding_and_overturning", "vehicle_left_hand_drive",
             "engine_capacity_cc", "propulsion_code", "age_of_vehicle",
             "generic_make_model", "lsoa_of_driver") 
q3b_clean <- vehicle_df[,df3bvar] 

datatable(head(q3b_clean))
```

##### Research Question 4 Dataset:

The fourth dataset will be created after analysing datasets 1 to 3, enabling us to determine the most significant variables for our regression analysis.

```{r creating df4}
df4var <- c() 
q4_clean <- accident_df[,df1var] 
```

### II. Data Cleaning and Wrangling for Each Research Question 

#### **A. Research Question 1 Data set** 

*Removing missing values*

We began by retrieving the missing values dictionary generated during our preliminary steps. This dictionary, encompassing all 'characters' representing missing values, served as our reference for identifying missing data in our new RQ1 data set.

```{r, include=FALSE}
#Sourcing the "missing values dictionary"
source(here::here("scripts", "missingvaluelist.R"))
```

Once we sourced the dictionary, we used it to search our current RQ1 data set, resulting in the identification of missing values for each variable.  

```{r}
#Counting of missing values
count_missing_accident <- sapply(names(missing_codes_accident), function(col_name) {
  sum(q1_clean[[col_name]] %in% missing_codes_accident[[col_name]])
})
convert_to_df <- function(missing_counts, dataset_name) {
  data_frame <- data.frame(
    Dataset = dataset_name, 
    Variable = names(missing_counts),
    Missing_Values = as.numeric(missing_counts)
  )
  return(data_frame)
}

accident_missing_df <- convert_to_df(count_missing_accident, "Accident")

datatable(accident_missing_df,rownames = FALSE, 
          caption = "Missing Values Accident Dataset", 
          class = 'cell-border stripe',
          options = list(pageLength = 10, order = list(list(2, 1))))
```

We then deleted rows containing any missing variables and verified their successful removal.

```{r}
#Removing rows with missing values for specific columns
q1_clean <- q1_clean %>%
  filter(
    !(road_type %in% missing_codes_accident$road_type),
    !(second_road_class %in% missing_codes_accident$second_road_class),
    !(light_conditions %in% missing_codes_accident$light_conditions),
    !(weather_conditions %in% missing_codes_accident$weather_conditions),
    !(road_surface_conditions %in% missing_codes_accident$road_surface_conditions),
    !(special_conditions_at_site %in% missing_codes_accident$special_conditions_at_site),
    !(urban_or_rural_area %in% missing_codes_accident$urban_or_rural_area),
    !(location_easting_osgr %in% missing_codes_accident$location_easting_osgr),
    !(location_northing_osgr %in% missing_codes_accident$location_northing_osgr),
    !(lsoa_of_accident_location %in% missing_codes_accident$lsoa_of_accident_location),
    !(longitude %in% missing_codes_accident$longitude),
    !(latitude %in% missing_codes_accident$latitude)
  )
```

```{r results='hide'}
#Verifying successful removal of missing values
count_missing_accident <- sapply(names(missing_codes_accident), function(col_name) {
  sum(q1_clean[[col_name]] %in% missing_codes_accident[[col_name]])
})
convert_to_df <- function(missing_counts, dataset_name) {
  data_frame <- data.frame(
    Dataset = dataset_name, 
    Variable = names(missing_counts),
    Missing_Values = as.numeric(missing_counts)
  )
  return(data_frame)
}

accident_missing_df <- convert_to_df(count_missing_accident, "Accident")

datatable(accident_missing_df,rownames = FALSE, 
          caption = "Missing Values accident_df Dataset", 
          class = 'cell-border stripe',
          options = list(pageLength = 5))
```

*Duplicates*

There are `r sum(duplicated(q1_clean))` duplicate rows in the dataset.

#### **B. Research Question 2 Dataset** 

*Removing missing values*

To handle missing values in the data set related to RQ2, we followed the same process as for our RQ1. We sourced the dictionary containing the names of all variables' missing values and identified them in our data set. Once identified, we deleted the rows containing missing values. 

```{r, include=FALSE}
#Sourcing the "missing values dictionary"
source(here::here("scripts", "missingvaluelist.R"))
```

```{r}
#Counting of missing values
count_missing_accident <- sapply(names(missing_codes_accident), function(col_name) {
  sum(q2_clean[[col_name]] %in% missing_codes_accident[[col_name]])
})
convert_to_df <- function(missing_counts, dataset_name) {
  data_frame <- data.frame(
    Dataset = dataset_name, 
    Variable = names(missing_counts),
    Missing_Values = as.numeric(missing_counts)
  )
  return(data_frame)
}

accident_missing_df <- convert_to_df(count_missing_accident, "Accident")

datatable(accident_missing_df,rownames = FALSE, 
          caption = "Missing Values Accident Dataset", 
          class = 'cell-border stripe',
          options = list(pageLength = 10, order = list(list(2, 1))))
```

```{r}
#Removing rows with missing values for specific columns
q2_clean <- q2_clean %>%
  filter(!(light_conditions %in% missing_codes_accident$light_conditions) &
         !(weather_conditions %in% missing_codes_accident$weather_conditions) &
         !(road_surface_conditions %in% missing_codes_accident$road_surface_conditions) &
         !(special_conditions_at_site %in% missing_codes_accident$special_conditions_at_site))
```

```{r results='hide'}
#Verifying successful removal of missing values
count_missing_accident <- sapply(names(missing_codes_accident), function(col_name) {
  sum(q2_clean[[col_name]] %in% missing_codes_accident[[col_name]])
})
convert_to_df <- function(missing_counts, dataset_name) {
  data_frame <- data.frame(
    Dataset = dataset_name, 
    Variable = names(missing_counts),
    Missing_Values = as.numeric(missing_counts)
  )
  return(data_frame)
}

accident_missing_df <- convert_to_df(count_missing_accident, "Accident")

datatable(accident_missing_df,rownames = FALSE, 
          caption = "Missing Values Accident Dataset", 
          class = 'cell-border stripe',
          options = list(pageLength = 10, order = list(list(2, 1))))
```

*Formatting changes*

```{r}
q2_clean$date <- as.Date(q2_clean$date, format = "%d/%m/%Y")
q2_clean$time <- hms::as_hms(paste0(q2_clean$time, ":00"))
q2_clean$hour <- as.integer(format(as.POSIXct(q2_clean$time, format='%H:%M:%S'), '%H'))
```

*Duplicates*

There are `r sum(duplicated(q2_clean))` duplicate rows in the dataset.

#### **C. Research Question 3a Dataset**

*Removing missing values*

To handle missing values in the data set related to RQ3, we followed the same process as for RQ1 and RQ2. We sourced the dictionary containing the names of all variables' missing values and identified them in our data set. Once identified, we deleted the rows containing missing values. 

```{r, include=FALSE}
#Sourcing the "missing values dictionary"
source(here::here("scripts", "missingvaluelist.R"))
```

```{r}
#Counting of missing values
count_missing_casualty <- sapply(names(missing_codes_casualty), function(col_name) {
  sum(q3a_clean[[col_name]] %in% missing_codes_casualty[[col_name]])
})
convert_to_df <- function(missing_counts, dataset_name) {
  data_frame <- data.frame(
    Dataset = dataset_name, 
    Variable = names(missing_counts),
    Missing_Values = as.numeric(missing_counts)
  )
  return(data_frame)
}

casualty_missing_df <- convert_to_df(count_missing_casualty, "Casualty")

datatable(casualty_missing_df,rownames = FALSE, 
          caption = "Missing Values Accident Dataset", 
          class = 'cell-border stripe',
          options = list(pageLength = 10, order = list(list(2, 1))))

```

```{r}
# Removing rows with missing values for specific columns
q3a_clean <- q3a_clean %>%
  filter(!(sex_of_casualty %in% missing_codes_casualty$sex_of_casualty) &
         !(age_of_casualty %in% missing_codes_casualty$age_of_casualty) &
         !(pedestrian_location %in% missing_codes_casualty$pedestrian_location) &
         !(pedestrian_movement %in% missing_codes_casualty$pedestrian_movement) &
         !(car_passenger %in% missing_codes_casualty$car_passenger) &
         !(pedestrian_movement %in% missing_codes_casualty$pedestrian_movement) &
         !(bus_or_coach_passenger %in% missing_codes_casualty$bus_or_coach_passenger) &
         !(pedestrian_road_maintenance_worker %in% missing_codes_casualty$pedestrian_road_maintenance_worker) &
         !(casualty_type %in% missing_codes_casualty$casualty_type) &
         !(casualty_home_area_type %in% missing_codes_casualty$casualty_home_area_type)) 

```

```{r results='hide'}
# Verifying successful removal of missing values
count_missing_casualty <- sapply(names(missing_codes_casualty), function(col_name) {
  sum(q3a_clean[[col_name]] %in% missing_codes_casualty[[col_name]])
})
convert_to_df <- function(missing_counts, dataset_name) {
  data_frame <- data.frame(
    Dataset = dataset_name, 
    Variable = names(missing_counts),
    Missing_Values = as.numeric(missing_counts)
  )
  return(data_frame)
}

casualty_missing_df <- convert_to_df(count_missing_casualty, "Casualty")

datatable(casualty_missing_df)
```

*Duplicates*

There are `r sum(duplicated(q3a_clean))` duplicate rows in the dataset

*Feature Engineering*

To enhance our data representation, we applied feature engineering, specifically 'one-hot-decoding,' to convert numerical variables into categorical ones. This approach eliminated the need for post-labeling graphs and improved our understanding of the data's representation. It also makes it easier to comprehend data tables, etc. The following table shows how we decoded our numerical data into categorical form. The corresponding code can be viewed by clicking on the box *Code*

![](images/Visual%20Drawings%20DS%20Project.png){fig-align="center" width="850"}

*Research Question 2*

```{r dow num to char}
q2_clean$day_name <- factor(q2_clean$day_of_week, 
                            levels = c(1, 2, 3, 4, 5, 6, 7),
                            labels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))

q2_clean$month_name <- format(as.Date(q2_clean$date), "%B")
q2_clean$month_name <- factor(q2_clean$month_name, # Setting it as a factor - ergo in order for our future graphs
                              levels = c("January", "February", "March", "April", "May", "June", 
                                         "July", "August", "September", "October", "November", "December"))

q2_clean$accident_severity_chr <- factor(q2_clean$accident_severity, 
                                     levels = c(1, 2, 3),
                                       labels = c("Fatal", "Serious", "Slight"))

q2_clean <- q2_clean %>%
  mutate(
    time_ranges = case_when(
      hour >= 0 & hour < 6  ~ "0-6 AM",
      hour >= 6 & hour < 12 ~ "6-12 AM",
      hour >= 12 & hour < 18 ~ "12-6 PM",
      hour >= 18 ~ "6-12 PM"
    ),
    time_ranges = factor(time_ranges, levels = c("0-6 AM", "6-12 AM", "12-6 PM", "6-12 PM"))
  )

```

*Research Question 3a*

```{r}
q3a_clean$casualty_class_chr <- factor(q3a_clean$casualty_reference,
                                       levels = c(1,2,3),
                                       labels = c("Driver/Rider", "Passenger", "Pedestrian"))

q3a_clean$casualty_severity_chr <- factor(q3a_clean$casualty_severity,
                                          levels = c(3,2,1),
                                          labels = c("Light", "Serious", "Fatal"))

q3a_clean$sex_chr <- factor(q3a_clean$sex_of_casualty,
                            levels = c(1,2),
                            labels = c("Male", "Female"))

q3a_clean$casualty_type_chr <- factor(q3a_clean$casualty_type,
                            levels = c(0,1,2,3,4,5,8,9,10,11,16,17,18,19,20,21,22,
                                       23,90,97,98,99),
                            labels = c("Pedestrian", "Cyclist", "Moto [50cc]", "Moto [125cc]",
                                       "Moto [125/500cc]", "Moto [+500cc]", "Taxi/Private Car",
                                       "Car", "Minibus", "Bus/Coach", "Horse Rider", 
                                       "Agri", "Tram", "Van/Goods [<3.5ton]",
                                       "Van/Goods [3.5/7.5tons]", "Van/Goods [>7.5ton]",
                                       "Mobility Scooter", "Electric Moto", "Other Vehicle",
                                       "Moto [unk CC]", "Van/Goods [unk ton]", "Unknown"))

q3a_clean$car_passenger_chr <- factor(q3a_clean$car_passenger,
                            levels = c(0, 1, 2, 9, -1),
                            labels = c("Not car passenger", "Front seat passenger", "Rear seat passenger",
                                       "unknown", "missing"))
```

   ### D. Saving these data sets

We finally saved our newly created datasets back to our data project folder, enabling access in subsequent markdown analysis files.

```{r saving clean datasets}
q1_data_path <- here::here("data", "q1_clean.rds")
q2_data_path <- here::here("data", "q2_clean.rds")
q3a_data_path <- here::here("data", "q3a_clean.rds")
q3b_data_path <- here::here("data", "q3b_clean.rds")
saveRDS(q1_clean, q1_data_path)
saveRDS(q2_clean, q2_data_path)
saveRDS(q3a_clean, q3a_data_path)
saveRDS(q3b_clean, q3b_data_path)
```
